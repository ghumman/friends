{"version":3,"sources":["serviceWorker.js","config/default-variables.js","Account/Login.js","Account/Forgot.js","Account/ResetPassword.js","Account/Change.js","Account/Register.js","Message/Profile.js","index.js"],"names":["Boolean","window","location","hostname","match","backendAddress","connect","state","authenticate","dispatch","login","username","password","type","props","errorMessage","useState","errorServerMessage","setErrorServerMessage","formUsername","setFormUsername","formPassword","setFormPassword","currentBackendAddress","setCurrentBackendAddress","useEffect","resultUsername","localStorage","getItem","resultPassword","history","push","pathname","style","paddingTop","color","className","Form","Group","controlId","Label","Control","value","placeholder","onChange","event","target","trim","setItem","borderStyle","borderColor","borderRadius","padding","onSubmit","preventDefault","fetch","method","headers","body","then","data","a","json","message","Button","variant","to","fontSize","onClick","formEmail","setFormEmail","formPassword2","setFormPassword2","token","setToken","parseUrl","localToken","url","href","regex","params","exec","undefined","email","password2","length","errorMessageCurrent","errorCurrentPassword","setErrorCurrentPassword","globalUsername","setGlobalUsername","globalPassword","setGlobalPassword","formCurrentPassword","setFormCurrentPassword","currentPassword","errorMessageLocal","formFirstName","setFormFirstName","formLastName","setFormLastName","setErrorMessage","lastName","signout","toEmail","setToEmail","toMessage","setToMessage","friends","setFriends","friendMessages","setFriendMessages","user","getFriends","changePassword","console","log","usersAll","friendsData","map","usr","key","margin","friendEmail","msgs","firstName","friendMessagesData","msg","sentAt","messageFromEmail","messageToEmail","as","rows","store","createStore","action","loggedIn","userPassword","routing","exact","path","component","Login","Register","Forgot","ResetPassword","Change","Profile","app","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c7b2b9a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const backendAddress = 'http://localhost:8080';\n","import React, {useState, useEffect}  from \"react\";\nimport { connect } from \"react-redux\";\n\n\nimport Button from \"react-bootstrap/Button\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { Link } from \"react-router-dom\";\n\nimport { backendAddress } from \"./../config/default-variables.js\"\n\nconst USERNAME = \"username\";\nconst PASSWORD = \"password\";\nconst BACKURL = \"backurl\";\n\nfunction Login(props) {\n  const [errorServerMessage, setErrorServerMessage] = useState(\"\");\n  const [formUsername, setFormUsername] = useState(\"\");\n  const [formPassword, setFormPassword] = useState(\"\"); \n  const [currentBackendAddress, setCurrentBackendAddress] = useState(backendAddress)\n\n  const handleChangeUsername = (event) => {\n    // this.setState({ formUsername: event.target.value });\n    setFormUsername(event.target.value); \n  }\n\n  const handleChangePassword = (event) => {\n    // this.setState({ formPassword: event.target.value });\n    setFormPassword(event.target.value); \n  }\n\n  const changeBackendUrl = (event) => {\n      setCurrentBackendAddress(event.target.value.trim()); \n      localStorage.setItem(BACKURL, event.target.value.trim());\n\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    var username = formUsername;\n    var password = formPassword;\n\n\n    fetch(\n      currentBackendAddress + '/login',\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: \"email=\" + username.trim() + \"&password=\" + password.trim() + \"&authType=regular\"\n      }).then(async function(data) {\n      data.json().then(async function(data) {\n        if (data.message === \"Logged In\") {\n          props.login(formUsername, formPassword);\n\n          /*\n            save the username and password in local storage\n            so that we don't have to ask for username password again from username\n          */\n\n          localStorage.setItem(USERNAME, username.trim());\n          localStorage.setItem(PASSWORD, password.trim());\n\n\n          props.history.push({\n            pathname: \"/Profile\"\n          });\n        } else {\n          setErrorServerMessage(data.message);\n        }\n      });\n    });\n  }\n\n\n\n\n\n  useEffect(()=>{\n    const resultUsername = localStorage.getItem(\"username\");\n    const resultPassword = localStorage.getItem(\"password\");\n    if (\n      resultUsername !== null &&\n      resultUsername !== \"\" &&\n      resultPassword !== null &&\n      resultPassword !== \"\"\n    ) {\n      props.login(resultUsername, resultPassword);\n      props.history.push({\n        pathname: \"/Profile\"\n      });\n    }\n  },[]) //notice the empty array here\n\n\n  const needHelp = () => {\n    props.history.push({\n      pathname: \"/Forgot\"\n    });\n  }\n\n\n\n  var errorMessage;\n  if (errorServerMessage !== \"\") {\n    errorMessage = (\n      <p\n        style={{\n          paddingTop: 20,\n          color: \"red\"\n        }}\n      >\n        {errorServerMessage}\n      </p>\n    );\n  } else {\n    errorMessage = null;\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Friends</p>\n\t Current Backend Address: {currentBackendAddress}\n        <Form>\n          <Form.Group controlId=\"loginFormUsername\">\n            <Form.Label>New Backend Address</Form.Label>\n            <Form.Control\n              value={currentBackendAddress}\n              placeholder=\"New Backend Address \"\n              onChange={changeBackendUrl}\n            />\n          </Form.Group>\n        </Form>\n        <p\n          style={{\n            borderStyle: \"solid\",\n            borderColor: \"white\",\n            borderRadius: 5,\n            padding: 5\n          }}\n        >\n          Please Login\n        </p>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group controlId=\"loginFormUsername\">\n            <Form.Label>Username</Form.Label>\n            <Form.Control\n              type=\"username\"\n              value={formUsername}\n              placeholder=\"Enter Username\"\n              onChange={handleChangeUsername}\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"loginFormPassword\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              value={formPassword}\n              placeholder=\"Password\"\n              onChange={handleChangePassword}\n            />\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"submit\">\n            Sign In\n          </Button>\n          <Link to=\"/register\" className=\"btn btn-link\">\n            Register\n          </Link>\n        </Form>\n\n        <div>\n          <p style={{ fontSize: 14, padding: 20 }} onClick={needHelp}>\n            Need help?\n          </p>\n        </div>\n\n        {errorMessage}\n      </header>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticate: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: (username, password) =>\n      dispatch({ type: \"UPDATE\", username: username, password: password })\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { backendAddress } from \"./../config/default-variables.js\"\n\nfunction Forgot(props) {\n\n  const [errorServerMessage, setErrorServerMessage] = useState(\"\");\n  const [formEmail, setFormEmail] = useState(\"\");\n  const [currentBackendAddress, setCurrentBackendAddress] = useState(backendAddress)\n\n  const handleChangeEmail = (event) => {\n    setFormEmail(event.target.value);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    var email = formEmail;\n\n\n    fetch(\n      currentBackendAddress + '/forgot-password',\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: \"email=\" + email.trim()\n      }\n    ).then(async function(data) {\n      data.json().then(async function(data) {\n        if (data.message === \"Reset password is sent\") {\n          setErrorServerMessage(\"Password reset link is sent to your email.\");\n        } else {\n          setErrorServerMessage(data.message);\n        }\n      });\n    });\n  }\n\n\n  useEffect(() => {\n    setCurrentBackendAddress(localStorage.getItem(\"backurl\") || backendAddress);\n    const resultUsername = localStorage.getItem(\"username\");\n    const resultPassword = localStorage.getItem(\"password\");\n    if (\n      resultUsername !== null &&\n      resultUsername !== \"\" &&\n      resultPassword !== null &&\n      resultPassword !== \"\"\n    ) {\n      props.login(resultUsername, resultPassword);\n      props.history.push({\n        pathname: \"/Profile\"\n      });\n    }\n  }, [])\n\n  const cancelPressed = () => {\n    props.history.push({\n      pathname: \"/\"\n    });\n  }\n\n\n\n    var errorMessage;\n    if (errorServerMessage !== \"\") {\n      errorMessage = (\n        <p\n          style={{\n            paddingTop: 20,\n            color: \"red\"\n          }}\n        >\n          {errorServerMessage}\n        </p>\n      );\n    } else {\n      errorMessage = null;\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Friends</p>\n          <p\n            style={{\n              borderStyle: \"solid\",\n              borderColor: \"white\",\n              borderRadius: 5,\n              padding: 5\n            }}\n          >\n            Forgot Password\n          </p>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"loginFormEmail\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                value={formEmail}\n                placeholder=\"Enter Email\"\n                onChange={handleChangeEmail}\n              />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              FORGOT\n            </Button>\n          </Form>\n\n          <div>\n            <p\n              style={{ fontSize: 14, paddingTop: 20 }}\n              onClick={cancelPressed}\n            >\n              Cancel\n            </p>\n          </div>\n\n          {errorMessage}\n        </header>\n      </div>\n    );\n  \n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticate: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: (username, password) =>\n      dispatch({ type: \"UPDATE\", username: username, password: password })\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Forgot);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { backendAddress } from \"./../config/default-variables.js\"\n\nfunction ResetPassword(props) {\n\n  const [errorServerMessage, setErrorServerMessage] = useState(\"\"); \n  const [formEmail, setFormEmail] = useState(\"\"); \n  const [formPassword, setFormPassword] = useState(\"\"); \n  const [formPassword2, setFormPassword2] = useState(\"\"); \n  const [token, setToken] = useState(\"\"); \n  const [currentBackendAddress, setCurrentBackendAddress] = useState(backendAddress)\n  \n  const handleChangeEmail = (event) => {\n    setFormEmail(event.target.value);\n  }\n\n  const handleChangePassword = (event) => {\n    setFormPassword(event.target.value);\n  }\n\n  const handleChangePassword2 = (event) => {\n    setFormPassword2(event.target.value);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    var email = formEmail;\n    var password = formPassword;\n    var password2 = formPassword2;\n\n    if (password.length >= 5 && password === password2) {\n\n      fetch(\n\n        currentBackendAddress + '/reset-password',\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body:\n            \"email=\" +\n            email.trim() +\n            \"&password=\" +\n            password.trim() +\n            \"&token=\" +\n            token\n        }\n      ).then(async function(data) {\n        data.json().then(async function(data) {\n          if (data.message === \"Password successfully reset\") {\n            setErrorServerMessage(\"Password updated successfully.\")\n          } else {\n            setErrorServerMessage(data.message)\n\n          }\n        });\n      });\n    } else {\n      setErrorServerMessage(\"Password should be 5 characters long and match.\")\n    }\n  }\n\n  useEffect(() => {\n    setCurrentBackendAddress(localStorage.getItem(\"backurl\") || backendAddress);\n    const resultUsername = localStorage.getItem(\"username\");\n    const resultPassword = localStorage.getItem(\"password\");\n    if (\n      resultUsername !== null &&\n      resultUsername !== \"\" &&\n      resultPassword !== null &&\n      resultPassword !== \"\"\n    ) {\n      props.login(resultUsername, resultPassword);\n      props.history.push({\n        pathname: \"/Profile\"\n      });\n    } else {\n      parseUrl();\n    }\n  }, [])\n\n  const parseUrl = () => {\n\n    var url = window.location.href;\n    var localToken;\n    var regex = /[?&]([^=#]+)=([^&#]*)/g,\n      params = {},\n      match;\n    while ((match = regex.exec(url))) {\n      params[match[1]] = match[2];\n      if (match[1] === \"token\") {\n        localToken = match[2];\n      }\n    } // while ends\n\n\n    if (\n      (localToken !== \"\") &\n      (localToken !== undefined) \n    ) {\n      setToken(localToken);\n      setErrorServerMessage(\"Please select new password.\");\n    } else {\n      setErrorServerMessage(\"Url is tempered\")\n    }\n  }\n\n  const loginPressed = () => {\n    props.history.push({\n      pathname: \"/\"\n    });\n  }\n\n    var errorMessage;\n    if (errorServerMessage !== \"\") {\n      errorMessage = (\n        <p\n          style={{\n            paddingTop: 20,\n            color: \"red\"\n          }}\n        >\n          {errorServerMessage}\n        </p>\n      );\n    } else {\n      errorMessage = null;\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Friends</p>\n          <p\n            style={{\n              borderStyle: \"solid\",\n              borderColor: \"white\",\n              borderRadius: 5,\n              padding: 5\n            }}\n          >\n            Forgot Password\n          </p>\n          <Form onSubmit={handleSubmit}>\n          <Form.Group controlId=\"loginFormEmail\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                value={formEmail}\n                placeholder=\"Email\"\n                onChange={handleChangeEmail}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formPassword}\n                placeholder=\"Password\"\n                onChange={handleChangePassword}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormPassword2\">\n              <Form.Label>Password (again)</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formPassword2}\n                placeholder=\"Password\"\n                onChange={handleChangePassword2}\n              />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              RESET PASSWORD\n            </Button>\n          </Form>\n\n          <div>\n            <p\n              style={{ fontSize: 14, paddingTop: 20 }}\n              onClick={loginPressed}\n            >\n              Back to Login\n            </p>\n          </div>\n\n          {errorMessage}\n        </header>\n      </div>\n    );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticate: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: (username, password) =>\n      dispatch({ type: \"UPDATE\", username: username, password: password })\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ResetPassword);\n\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\n\nimport Button from \"react-bootstrap/Button\";\n\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { backendAddress } from \"./../config/default-variables.js\"\n\n\nconst PASSWORD = \"password\";\n\nfunction Login(props) {\n\n  const [errorCurrentPassword, setErrorCurrentPassword] = useState(\"\");\n  const [errorServerMessage, setErrorServerMessage] = useState(\"\");\n  const [globalUsername, setGlobalUsername] = useState(\"\");\n  const [globalPassword, setGlobalPassword] = useState(\"\");\n  const [formCurrentPassword, setFormCurrentPassword] = useState(\"\");\n  const [formPassword, setFormPassword] = useState(\"\");\n  const [formPassword2, setFormPassword2] = useState(\"\");\n  const [currentBackendAddress, setCurrentBackendAddress] = useState(backendAddress)\n\n\n\n  const handleChangeCurrentPassword = (event) => {\n    setFormCurrentPassword(event.target.value);\n  }\n\n  const handleChangePassword = (event) => {\n    setFormPassword(event.target.value);\n  }\n\n  const handleChangePassword2 = (event) => {\n    setFormPassword2(event.target.value); \n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    var password = formPassword;\n    var password2 = formPassword2;\n    var currentPassword = formCurrentPassword;\n\n    if (currentPassword === globalPassword) {\n\n      setErrorCurrentPassword(\"\");\n      if (password.length >= 5 && password === password2) {\n\n        fetch(\n          currentBackendAddress + '/change-password',\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body:\n              \"email=\" +\n              globalUsername.trim() +\n              \"&password=\" +\n              currentPassword.trim() +\n              \"&newPassword=\" +\n              password.trim() +\n              \"&authType=regular\"\n          }\n        ).then(async function(data) {\n          data.json().then(async function(data) {\n            if (data.message === \"Password changed\") {\n              setErrorServerMessage(\"Password changed successfully.\");\n\n              localStorage.setItem(PASSWORD, password);\n            } else {\n              setErrorServerMessage(data.message);\n            }\n          });\n        });\n      } else {\n        setErrorServerMessage(\"Password should be 5 characters long and match.\")\n      }\n    } else {\n      setErrorCurrentPassword(\"Password does not match current password.\");\n    }\n  }\n\n  useEffect(() => {\n    setCurrentBackendAddress(localStorage.getItem(\"backurl\") || backendAddress);\n    const resultUsername = localStorage.getItem(\"username\");\n    const resultPassword = localStorage.getItem(\"password\");\n    if (\n      resultUsername !== null &&\n      resultUsername !== \"\" &&\n      resultPassword !== null &&\n      resultPassword !== \"\"\n    ) {\n      setGlobalUsername(resultUsername); \n      setGlobalPassword(resultPassword); \n    } else {\n      props.login(resultUsername, resultPassword);\n      props.history.push({\n        pathname: \"/\"\n      });\n    }\n  }, [])\n\n  const loginPressed = () => {\n    props.history.push({\n      pathname: \"/Profile\"\n    });\n  }\n\n\n\n\n    var errorMessageCurrent;\n    if (errorCurrentPassword !== \"\") {\n      errorMessageCurrent = (\n        <p\n          style={{\n            paddingTop: 20,\n            color: \"red\"\n          }}\n        >\n          {errorCurrentPassword}\n        </p>\n      );\n    } else {\n      errorMessageCurrent = null;\n    }\n\n    var errorMessage;\n    if (errorServerMessage !== \"\") {\n      errorMessage = (\n        <p\n          style={{\n            paddingTop: 20,\n            color: \"red\"\n          }}\n        >\n          {errorServerMessage}\n        </p>\n      );\n    } else {\n      errorMessage = null;\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Friends</p>\n          <p\n            style={{\n              borderStyle: \"solid\",\n              borderColor: \"white\",\n              borderRadius: 5,\n              padding: 5\n            }}\n          >\n            Change Password\n          </p>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"loginFormCurrentPassword\">\n              <Form.Label>Current Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formCurrentPassword}\n                placeholder=\"Current Password\"\n                onChange={handleChangeCurrentPassword}\n              />\n              {errorMessageCurrent}\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formPassword}\n                placeholder=\"Password\"\n                onChange={handleChangePassword}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormPassword2\">\n              <Form.Label>Password (again)</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formPassword2}\n                placeholder=\"Password\"\n                onChange={handleChangePassword2}\n              />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              RESET PASSWORD\n            </Button>\n          </Form>\n\n          <div>\n            <p\n              style={{ fontSize: 14, paddingTop: 20 }}\n              onClick={loginPressed}\n            >\n              Back / Cancel\n            </p>\n          </div>\n\n          {errorMessage}\n        </header>\n      </div>\n    );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticate: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: (username, password) =>\n      dispatch({ type: \"UPDATE\", username: username, password: password })\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\n\nimport Button from \"react-bootstrap/Button\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { Link } from \"react-router-dom\";\n\nimport { backendAddress } from \"./../config/default-variables.js\"\n\nconst USERNAME = \"username\";\nconst PASSWORD = \"password\";\nconst BACKURL = \"backurl\";\n\nfunction Register(props) {\n\n\n  const [formFirstName, setFormFirstName] = useState(\"\"); \n  const [formLastName, setFormLastName] = useState(\"\"); \n  const [formPassword, setFormPassword] = useState(\"\"); \n  const [formPassword2, setFormPassword2] = useState(\"\"); \n  const [formEmail, setFormEmail] = useState(\"\"); \n  const [errorMessage, setErrorMessage] = useState(\"\"); \n  const [currentBackendAddress, setCurrentBackendAddress] = useState(backendAddress)\n\n  const handleChangeFirstName = (event) => {\n    setFormFirstName(event.target.value );\n  }\n  const handleChangeLastName = (event) => {\n    setFormLastName(event.target.value ); \n  }\n\n  const handleChangeEmail = (event) => {\n    setFormEmail(event.target.value ); \n  }\n\n  const handleChangePassword = (event) => {\n    setFormPassword(event.target.value);\n  }\n\n  const handleChangePassword2 = (event) => {\n    setFormPassword2(event.target.value ); \n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (\n      (formFirstName.trim() === \"\") |\n      (formLastName.trim() === \"\") |\n      (formEmail.trim() === \"\") |\n      (formPassword.trim() === \"\") |\n      (formPassword2.trim() === \"\")\n    ) {\n      setErrorMessage(\"All fields are required. Please fill all of them.\")\n      return;\n    }\n\n    if (formPassword.trim() !== formPassword2.trim()) {\n      setErrorMessage(\"Passwords don't match.\");\n      return;\n    }\n\n    var firstName = formFirstName;\n    var lastName = formLastName;\n    var email = formEmail;\n    var password = formPassword;\n\n\n    fetch(\n      currentBackendAddress + '/add-user',\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body:\n          \"firstName=\" +\n          firstName.trim() +\n          \"&lastName=\" +\n          lastName.trim() +\n          \"&email=\" +\n          email.trim() +\n          \"&password=\" +\n          password.trim() +\n          \"&authType=regular\"\n\n      }\n    ).then(async function(data) {\n      data.json().then(async function(data) {\n        if (data.message === \"User Created\") {\n          setErrorMessage(data.message );\n\n          localStorage.setItem(USERNAME, email.trim());\n          localStorage.setItem(PASSWORD, password.trim());\n\n          props.login(formEmail, formPassword);\n\n          props.history.push({\n            pathname: \"/Profile\"\n          });\n        } else {\n          setErrorMessage( data.message );\n        }\n      });\n    });\n  }\n\n  // in componentDidMount \n  // check if user credentials are already saved,\n  // in that case save it in redux and send him to profile PAGE\n  useEffect(() => {\n    setCurrentBackendAddress(localStorage.getItem(\"backurl\") || backendAddress);\n    const resultUsername = localStorage.getItem(\"username\");\n    const resultPassword = localStorage.getItem(\"password\");\n    if (\n      resultUsername !== null &&\n      resultUsername !== \"\" &&\n      resultPassword !== null &&\n      resultPassword !== \"\"\n    ) {\n      props.login(resultUsername, resultPassword);\n      props.history.push({\n        pathname: \"/Profile\"\n      });\n    } \n  }, [])\n  // componentDidMount() {\n    \n  // }\n\n    var errorMessageLocal;\n    if (errorMessage.trim() === \"\") errorMessageLocal = null;\n    else\n      errorMessageLocal = (\n        <p style={{ color: \"red\" }}>{errorMessage.trim()}</p>\n      );\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Friends</p>\n          <p>We are glad you are going to become Friends User</p>\n          {errorMessageLocal}\n\n          <p\n            style={{\n              borderStyle: \"solid\",\n              borderColor: \"white\",\n              borderRadius: 5,\n              padding: 5\n            }}\n          >\n            Please Register\n          </p>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"loginFormFirstName\">\n              <Form.Label>First Name</Form.Label>\n              <Form.Control\n                type=\"username\"\n                value={formFirstName}\n                placeholder=\"Enter First Name\"\n                onChange={handleChangeFirstName}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormLastName\">\n              <Form.Label>Last Name</Form.Label>\n              <Form.Control\n                type=\"username\"\n                value={formLastName}\n                placeholder=\"Enter Last Name\"\n                onChange={handleChangeLastName}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"loginFormEmail\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                value={formEmail}\n                placeholder=\"Enter Email\"\n                onChange={handleChangeEmail}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formPassword}\n                placeholder=\"Password\"\n                onChange={handleChangePassword}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormPassword2\">\n              <Form.Label>Password (again)</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formPassword2}\n                placeholder=\"Password\"\n                onChange={handleChangePassword2}\n              />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              Sign Up\n            </Button>\n            <Link to=\"/\" className=\"btn btn-link\">\n              Cancel\n            </Link>\n          </Form>\n          <br />\n          <br />\n        </header>\n      </div>\n    );\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    authenticate: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: (username, password) =>\n      dispatch({ type: \"UPDATE\", username: username, password: password })\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Register);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { backendAddress } from \"./../config/default-variables.js\"\n\nconst USERNAME = \"username\";\nconst PASSWORD = \"password\";\nconst LOGIN_TYPE = \"login_type\";\nconst ACCOUNT_TYPE = \"account_type\";\nconst EMAIL = \"email\";\n\nfunction Profile(props) {\n\n  const [toEmail, setToEmail] = useState(\"\");\n  const [toMessage, setToMessage] = useState(\"\");\n  const [errorServerMessage, setErrorServerMessage] = useState(\"\");\n  const [friends, setFriends] = useState([]);\n  const [friendMessages, setFriendMessages] = useState([]);\n  const [currentBackendAddress, setCurrentBackendAddress] = useState(localStorage.getItem(\"backurl\"));\n\n\n  const handleChangeToEmail = (event) => {\n    setToEmail(event.target.value);\n  }\n\n  const handleChangeToMessage = (event) => {\n    setToMessage(event.target.value);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    fetch(\n      currentBackendAddress + '/send-message',\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body:\n          \"message=\" + toMessage +\n          \"&messageFromEmail=\" + localStorage.getItem(USERNAME) +\n          \"&messageToEmail=\" + toEmail.trim() +\n          \"&authType=regular\" +\n          \"&password=\" + localStorage.getItem(PASSWORD)\n      }\n    ).then(async function (data) {\n      data.json().then(async function (data) {\n        if (data.message === \"Message sent\") {\n          setErrorServerMessage(\"Message sent successfully.\");\n        } else {\n          setErrorServerMessage(data.message);\n        }\n      });\n    });\n  }\n\n\n  useEffect(() => {\n    setCurrentBackendAddress(localStorage.getItem(\"backurl\") || backendAddress);\n    if (props.authenticate.user.trim() === \"\") {\n      props.history.push({\n        pathname: \"/\"\n      });\n    }\n    getFriends();\n  }, [])\n\n  const getFriends = () => {\n    console.log('currentBackendAddress: ' + currentBackendAddress);\n    fetch(\n      currentBackendAddress + '/all-friends',\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body:\n          \"email=\" + localStorage.getItem(USERNAME) +\n          \"&authType=regular\" +\n          \"&password=\" + localStorage.getItem(PASSWORD)\n      }\n    ).then(async function (data) {\n      data.json().then(async function (data) {\n\n        if (data.message === \"Friends attached\") {\n          setFriends(data.usersAll)\n        } else {\n          setErrorServerMessage(data.message);\n        }\n      });\n    });\n  }\n\n  const signMeOut = () => {\n    localStorage.setItem(USERNAME, \"\");\n    localStorage.setItem(PASSWORD, \"\");\n    localStorage.setItem(LOGIN_TYPE, \"\");\n    localStorage.setItem(ACCOUNT_TYPE, \"\");\n    localStorage.setItem(EMAIL, \"\");\n    props.signout();\n    props.history.push({\n      pathname: \"/\"\n    });\n  }\n\n  const changePasswordScreen = () => {\n    props.history.push({\n      pathname: \"/Change\"\n    });\n  }\n\n  const showFriendMessages = (friendEmail) => {\n    fetch(\n      currentBackendAddress + '/messages-user-and-friend',\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body:\n          \"userEmail=\" + localStorage.getItem(USERNAME) +\n          \"&friendEmail=\" + friendEmail +\n          \"&authType=regular\" +\n          \"&password=\" + localStorage.getItem(PASSWORD)\n      }\n    ).then(async function (data) {\n      data.json().then(async function (data) {\n\n        if (data.message === \"Messages attached\") {\n          setFriendMessages(data.msgs)\n        } else {\n          setErrorServerMessage(data.message);\n        }\n      });\n    });\n  }\n\n  var changePassword;\n  const resultType = localStorage.getItem(\"login_type\");\n\n  if (resultType === \"special\") {\n    changePassword = null;\n  } else {\n    changePassword = (\n      <div style={{ padding: 10 }}>\n        <Button onClick={() => changePasswordScreen()}>\n          CHANGE PASSWORD\n        </Button>\n      </div>\n    );\n  }\n\n  var errorMessage;\n  if (errorServerMessage !== \"\") {\n    errorMessage = (\n      <p\n        style={{\n          paddingTop: 20,\n          color: \"red\"\n        }}\n      >\n        {errorServerMessage}\n      </p>\n    );\n  } else {\n    errorMessage = null;\n  }\n\n  const friendsData = (\n    <div>\n      {friends.map((usr) =>\n        <div key={usr.email}\n          style={{\n            borderStyle: \"solid\",\n            borderColor: \"white\",\n            borderRadius: 5,\n            padding: 5,\n            margin: 5\n          }}>\n          <li onClick={() => showFriendMessages(usr.email)}>\n            {usr.firstName}{' '}{usr.lastName}{' ['}{usr.email}{']'}\n          </li>\n        </div>\n      )}\n    </div>\n  );\n\n  const friendMessagesData = (\n    <div>\n      {friendMessages.map((msg) =>\n        <div key={msg.sentAt}\n          style={{\n            borderStyle: \"solid\",\n            borderColor: \"white\",\n            borderRadius: 5,\n            padding: 5,\n            margin: 5\n          }}>\n          <li>\n            From: {'   '}{msg.messageFromEmail}{'    '}To: {'   '}{msg.messageToEmail}\n          </li>\n          <div>\n            {msg.message}\n          </div>\n          <div>\n            {msg.sentAt}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {errorMessage}\n        <div style={{ padding: 10 }}>\n          <Button onClick={() => signMeOut()}>SIGN OUT</Button>\n        </div>\n        {changePassword}\n\n        <p>Friends</p>\n        Current Backend Address: {currentBackendAddress}\n        <p>Hi {localStorage.getItem(USERNAME)}</p>\n\n        <p\n          style={{\n            borderStyle: \"solid\",\n            borderColor: \"white\",\n            borderRadius: 5,\n            padding: 5\n          }}\n        >\n          Send Message\n          </p>\n\n        <Form onSubmit={handleSubmit}>\n          <Form.Group controlId=\"toEmail\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control\n              type=\"email\"\n              value={toEmail}\n              placeholder=\"Enter Email\"\n              onChange={handleChangeToEmail}\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"toMessage\">\n            <Form.Label>Message</Form.Label>\n            <Form.Control\n              as=\"textarea\" rows=\"3\"\n              value={toMessage}\n              onChange={handleChangeToMessage}\n            />\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"submit\">\n            SEND\n            </Button>\n        </Form>\n\n        {friendsData}\n        {friendMessagesData}\n\n      </header>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticate: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: (username, password) =>\n      dispatch({ type: \"UPDATE\", username: username, password: password }),\n    signout: () => dispatch({ type: \"LOGOUT\" })\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Profile);\n\n","import React from \"react\";\n\nimport { Route, HashRouter as Router } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport Login from \"./Account/Login\";\nimport Forgot from \"./Account/Forgot\";\nimport ResetPassword from \"./Account/ResetPassword\";\nimport Change from \"./Account/Change\";\nimport Register from \"./Account/Register\";\nimport Profile from \"./Message/Profile\";\n\nimport { Provider } from \"react-redux\";\n\nimport { createStore } from \"redux\";\n\n// eslint-disable-next-line no-unused-vars\nconst authentication = (state = [], action) => {\n  switch (action.type) {\n    case \"UPDATE\":\n      return {\n        loggedIn: true,\n        user: action.username,\n        userPassword: action.password\n      };\n    case \"LOGOUT\":\n      return {\n        loggedIn: false,\n        user: \"\",\n        userPassword: \"\"\n      };\n\n    default:\n      return {\n        loggedIn: false,\n        user: \"\",\n        userPassword: \"\"\n      };\n  }\n};\n\nconst store = createStore(authentication);\n\nconst routing = (\n  <Provider store={store}>\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={Login} />\n        <Route exact path=\"/Register\" component={Register} />\n        <Route path=\"/Forgot\" component={Forgot} />\n        <Route path=\"/reset-password\" component={ResetPassword} />\n        <Route path=\"/Change\" component={Change} />\n        <Route path=\"/Profile\" component={Profile} />\n      </div>\n    </Router>\n  </Provider>\n);\n\nconst app = document.getElementById(\"root\");\nReactDOM.render(routing, app);\n\n// ReactDOM.render(\n// <Provider store={store}>\n// <App />\n// </Provider>,\n// document.getElementById(\"app\")\n// )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}