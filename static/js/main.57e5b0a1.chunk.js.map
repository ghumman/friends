{"version":3,"sources":["serviceWorker.js","Account/Login.js","Account/Forgot.js","Account/ResetPassword.js","Account/Change.js","Account/Register.js","Message/Profile.js","index.js"],"names":["Boolean","window","location","hostname","match","connect","state","authenticate","dispatch","login","username","password","type","props","errorMessage","useState","errorServerMessage","setErrorServerMessage","formUsername","setFormUsername","formPassword","setFormPassword","useEffect","resultUsername","localStorage","getItem","resultPassword","history","push","pathname","style","paddingTop","color","className","borderStyle","borderColor","borderRadius","padding","Form","onSubmit","event","preventDefault","fetch","method","headers","body","trim","then","data","a","json","message","setItem","Group","controlId","Label","Control","value","placeholder","onChange","target","Button","variant","to","fontSize","onClick","formEmail","setFormEmail","formPassword2","setFormPassword2","token","setToken","parseUrl","localToken","url","href","regex","params","exec","undefined","password2","length","errorMessageCurrent","errorCurrentPassword","setErrorCurrentPassword","globalUsername","setGlobalUsername","globalPassword","setGlobalPassword","formCurrentPassword","setFormCurrentPassword","currentPassword","errorMessageLocal","formFirstName","setFormFirstName","formLastName","setFormLastName","setErrorMessage","lastName","email","signout","toEmail","setToEmail","toMessage","setToMessage","friends","setFriends","friendMessages","setFriendMessages","user","getFriends","changePassword","usersAll","friendsData","map","usr","key","margin","friendEmail","msgs","firstName","friendMessagesData","msg","sentAt","messageFromEmail","messageToEmail","as","rows","store","createStore","action","loggedIn","userPassword","routing","exact","path","component","Login","Register","Forgot","ResetPassword","Change","Profile","app","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57e5b0a1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {useState, useEffect}  from \"react\";\nimport { connect } from \"react-redux\";\n\n\nimport Button from \"react-bootstrap/Button\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { Link } from \"react-router-dom\";\n\nconst USERNAME = \"username\";\nconst PASSWORD = \"password\";\n\nfunction Login(props) {\n  const [errorServerMessage, setErrorServerMessage] = useState(\"\");\n  const [formUsername, setFormUsername] = useState(\"\");\n  const [formPassword, setFormPassword] = useState(\"\"); \n\n  const handleChangeUsername = (event) => {\n    // this.setState({ formUsername: event.target.value });\n    setFormUsername(event.target.value); \n  }\n\n  const handleChangePassword = (event) => {\n    // this.setState({ formPassword: event.target.value });\n    setFormPassword(event.target.value); \n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    var username = formUsername;\n    var password = formPassword;\n\n\n    fetch(\n      \"http://localhost:8080/login\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: \"email=\" + username.trim() + \"&password=\" + password.trim() + \"&authType=regular\"\n      }).then(async function(data) {\n      data.json().then(async function(data) {\n        if (data.message === \"Logged In\") {\n          props.login(formUsername, formPassword);\n\n          /*\n            save the username and password in local storage\n            so that we don't have to ask for username password again from username\n          */\n\n          localStorage.setItem(USERNAME, username.trim());\n          localStorage.setItem(PASSWORD, password.trim());\n\n          props.history.push({\n            pathname: \"/Profile\"\n          });\n        } else {\n          setErrorServerMessage(data.message);\n        }\n      });\n    });\n  }\n\n\n\n\n\n  useEffect(()=>{\n    const resultUsername = localStorage.getItem(\"username\");\n    const resultPassword = localStorage.getItem(\"password\");\n    if (\n      resultUsername !== null &&\n      resultUsername !== \"\" &&\n      resultPassword !== null &&\n      resultPassword !== \"\"\n    ) {\n      props.login(resultUsername, resultPassword);\n      props.history.push({\n        pathname: \"/Profile\"\n      });\n    }\n  },[]) //notice the empty array here\n\n\n  const needHelp = () => {\n    props.history.push({\n      pathname: \"/Forgot\"\n    });\n  }\n\n\n\n  var errorMessage;\n  if (errorServerMessage !== \"\") {\n    errorMessage = (\n      <p\n        style={{\n          paddingTop: 20,\n          color: \"red\"\n        }}\n      >\n        {errorServerMessage}\n      </p>\n    );\n  } else {\n    errorMessage = null;\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Friends</p>\n        <p\n          style={{\n            borderStyle: \"solid\",\n            borderColor: \"white\",\n            borderRadius: 5,\n            padding: 5\n          }}\n        >\n          Please Login\n        </p>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group controlId=\"loginFormUsername\">\n            <Form.Label>Username</Form.Label>\n            <Form.Control\n              type=\"username\"\n              value={formUsername}\n              placeholder=\"Enter Username\"\n              onChange={handleChangeUsername}\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"loginFormPassword\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              value={formPassword}\n              placeholder=\"Password\"\n              onChange={handleChangePassword}\n            />\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"submit\">\n            Sign In\n          </Button>\n          <Link to=\"/register\" className=\"btn btn-link\">\n            Register\n          </Link>\n        </Form>\n\n        <div>\n          <p style={{ fontSize: 14, padding: 20 }} onClick={needHelp}>\n            Need help?\n          </p>\n        </div>\n\n        {errorMessage}\n      </header>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticate: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: (username, password) =>\n      dispatch({ type: \"UPDATE\", username: username, password: password })\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport Form from \"react-bootstrap/Form\";\n\nfunction Forgot(props) {\n\n  const [errorServerMessage, setErrorServerMessage] = useState(\"\");\n  const [formEmail, setFormEmail] = useState(\"\");\n\n  const handleChangeEmail = (event) => {\n    setFormEmail(event.target.value);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    var email = formEmail;\n\n\n    fetch(\n      \"http://localhost:8080/forgot-password\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: \"email=\" + email.trim()\n      }\n    ).then(async function(data) {\n      data.json().then(async function(data) {\n        if (data.message === \"Reset password is sent\") {\n          setErrorServerMessage(\"Password reset link is sent to your email.\");\n        } else {\n          setErrorServerMessage(data.message);\n        }\n      });\n    });\n  }\n\n\n  useEffect(() => {\n    const resultUsername = localStorage.getItem(\"username\");\n    const resultPassword = localStorage.getItem(\"password\");\n    if (\n      resultUsername !== null &&\n      resultUsername !== \"\" &&\n      resultPassword !== null &&\n      resultPassword !== \"\"\n    ) {\n      props.login(resultUsername, resultPassword);\n      props.history.push({\n        pathname: \"/Profile\"\n      });\n    }\n  }, [])\n\n  const cancelPressed = () => {\n    props.history.push({\n      pathname: \"/\"\n    });\n  }\n\n\n\n    var errorMessage;\n    if (errorServerMessage !== \"\") {\n      errorMessage = (\n        <p\n          style={{\n            paddingTop: 20,\n            color: \"red\"\n          }}\n        >\n          {errorServerMessage}\n        </p>\n      );\n    } else {\n      errorMessage = null;\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Friends</p>\n          <p\n            style={{\n              borderStyle: \"solid\",\n              borderColor: \"white\",\n              borderRadius: 5,\n              padding: 5\n            }}\n          >\n            Forgot Password\n          </p>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"loginFormEmail\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                value={formEmail}\n                placeholder=\"Enter Email\"\n                onChange={handleChangeEmail}\n              />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              FORGOT\n            </Button>\n          </Form>\n\n          <div>\n            <p\n              style={{ fontSize: 14, paddingTop: 20 }}\n              onClick={cancelPressed}\n            >\n              Cancel\n            </p>\n          </div>\n\n          {errorMessage}\n        </header>\n      </div>\n    );\n  \n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticate: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: (username, password) =>\n      dispatch({ type: \"UPDATE\", username: username, password: password })\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Forgot);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport Form from \"react-bootstrap/Form\";\n\nfunction ResetPassword(props) {\n\n  const [errorServerMessage, setErrorServerMessage] = useState(\"\"); \n  const [formPassword, setFormPassword] = useState(\"\"); \n  const [formPassword2, setFormPassword2] = useState(\"\"); \n  const [token, setToken] = useState(\"\"); \n  \n\n  const handleChangePassword = (event) => {\n    setFormPassword(event.target.value);\n  }\n\n  const handleChangePassword2 = (event) => {\n    setFormPassword2(event.target.value);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    var password = formPassword;\n    var password2 = formPassword2;\n\n    if (password.length >= 5 && password === password2) {\n\n      fetch(\n        \"http://localhost:8080/reset-password\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body:\n            \"password=\" +\n            password.trim() +\n            \"&token=\" +\n            token\n        }\n      ).then(async function(data) {\n        data.json().then(async function(data) {\n          if (data.message === \"Password successfully reset\") {\n            setErrorServerMessage(\"Password updated successfully.\")\n          } else {\n            setErrorServerMessage(data.message)\n\n          }\n        });\n      });\n    } else {\n      setErrorServerMessage(\"Password should be 5 characters long and match.\")\n    }\n  }\n\n  useEffect(() => {\n\n    const resultUsername = localStorage.getItem(\"username\");\n    const resultPassword = localStorage.getItem(\"password\");\n    if (\n      resultUsername !== null &&\n      resultUsername !== \"\" &&\n      resultPassword !== null &&\n      resultPassword !== \"\"\n    ) {\n      props.login(resultUsername, resultPassword);\n      props.history.push({\n        pathname: \"/Profile\"\n      });\n    } else {\n      parseUrl();\n    }\n  }, [])\n\n  const parseUrl = () => {\n\n    var url = window.location.href;\n    var localToken;\n    var regex = /[?&]([^=#]+)=([^&#]*)/g,\n      params = {},\n      match;\n    while ((match = regex.exec(url))) {\n      params[match[1]] = match[2];\n      if (match[1] === \"token\") {\n        localToken = match[2];\n      }\n    } // while ends\n\n\n    if (\n      (localToken !== \"\") &\n      (localToken !== undefined) \n    ) {\n      setToken(localToken);\n      setErrorServerMessage(\"Please select new password.\");\n    } else {\n      setErrorServerMessage(\"Url is tempered\")\n    }\n  }\n\n  const loginPressed = () => {\n    props.history.push({\n      pathname: \"/\"\n    });\n  }\n\n    var errorMessage;\n    if (errorServerMessage !== \"\") {\n      errorMessage = (\n        <p\n          style={{\n            paddingTop: 20,\n            color: \"red\"\n          }}\n        >\n          {errorServerMessage}\n        </p>\n      );\n    } else {\n      errorMessage = null;\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Friends</p>\n          <p\n            style={{\n              borderStyle: \"solid\",\n              borderColor: \"white\",\n              borderRadius: 5,\n              padding: 5\n            }}\n          >\n            Forgot Password\n          </p>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"loginFormPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formPassword}\n                placeholder=\"Password\"\n                onChange={handleChangePassword}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormPassword2\">\n              <Form.Label>Password (again)</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formPassword2}\n                placeholder=\"Password\"\n                onChange={handleChangePassword2}\n              />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              RESET PASSWORD\n            </Button>\n          </Form>\n\n          <div>\n            <p\n              style={{ fontSize: 14, paddingTop: 20 }}\n              onClick={loginPressed}\n            >\n              Back to Login\n            </p>\n          </div>\n\n          {errorMessage}\n        </header>\n      </div>\n    );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticate: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: (username, password) =>\n      dispatch({ type: \"UPDATE\", username: username, password: password })\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ResetPassword);\n\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\n\nimport Button from \"react-bootstrap/Button\";\n\n\nimport Form from \"react-bootstrap/Form\";\n\n\n\nconst PASSWORD = \"password\";\n\nfunction Login(props) {\n\n  const [errorCurrentPassword, setErrorCurrentPassword] = useState(\"\");\n  const [errorServerMessage, setErrorServerMessage] = useState(\"\");\n  const [globalUsername, setGlobalUsername] = useState(\"\");\n  const [globalPassword, setGlobalPassword] = useState(\"\");\n  const [formCurrentPassword, setFormCurrentPassword] = useState(\"\");\n  const [formPassword, setFormPassword] = useState(\"\");\n  const [formPassword2, setFormPassword2] = useState(\"\");\n\n\n\n  const handleChangeCurrentPassword = (event) => {\n    setFormCurrentPassword(event.target.value);\n  }\n\n  const handleChangePassword = (event) => {\n    setFormPassword(event.target.value);\n  }\n\n  const handleChangePassword2 = (event) => {\n    setFormPassword2(event.target.value); \n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    var password = formPassword;\n    var password2 = formPassword2;\n    var currentPassword = formCurrentPassword;\n\n    if (currentPassword === globalPassword) {\n\n      setErrorCurrentPassword(\"\");\n      if (password.length >= 5 && password === password2) {\n\n        fetch(\n          \"http://localhost:8080/change-password\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body:\n              \"email=\" +\n              globalUsername.trim() +\n              \"&password=\" +\n              currentPassword.trim() +\n              \"&newPassword=\" +\n              password.trim() +\n              \"&authType=regular\"\n          }\n        ).then(async function(data) {\n          data.json().then(async function(data) {\n            if (data.message === \"Password changed\") {\n              setErrorServerMessage(\"Password changed successfully.\");\n\n              localStorage.setItem(PASSWORD, password);\n            } else {\n              setErrorServerMessage(data.message);\n            }\n          });\n        });\n      } else {\n        setErrorServerMessage(\"Password should be 5 characters long and match.\")\n      }\n    } else {\n      setErrorCurrentPassword(\"Password does not match current password.\");\n    }\n  }\n\n  useEffect(() => {\n    const resultUsername = localStorage.getItem(\"username\");\n    const resultPassword = localStorage.getItem(\"password\");\n    if (\n      resultUsername !== null &&\n      resultUsername !== \"\" &&\n      resultPassword !== null &&\n      resultPassword !== \"\"\n    ) {\n      setGlobalUsername(resultUsername); \n      setGlobalPassword(resultPassword); \n    } else {\n      props.login(resultUsername, resultPassword);\n      props.history.push({\n        pathname: \"/\"\n      });\n    }\n  }, [])\n\n  const loginPressed = () => {\n    props.history.push({\n      pathname: \"/Profile\"\n    });\n  }\n\n\n\n\n    var errorMessageCurrent;\n    if (errorCurrentPassword !== \"\") {\n      errorMessageCurrent = (\n        <p\n          style={{\n            paddingTop: 20,\n            color: \"red\"\n          }}\n        >\n          {errorCurrentPassword}\n        </p>\n      );\n    } else {\n      errorMessageCurrent = null;\n    }\n\n    var errorMessage;\n    if (errorServerMessage !== \"\") {\n      errorMessage = (\n        <p\n          style={{\n            paddingTop: 20,\n            color: \"red\"\n          }}\n        >\n          {errorServerMessage}\n        </p>\n      );\n    } else {\n      errorMessage = null;\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Friends</p>\n          <p\n            style={{\n              borderStyle: \"solid\",\n              borderColor: \"white\",\n              borderRadius: 5,\n              padding: 5\n            }}\n          >\n            Change Password\n          </p>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"loginFormCurrentPassword\">\n              <Form.Label>Current Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formCurrentPassword}\n                placeholder=\"Current Password\"\n                onChange={handleChangeCurrentPassword}\n              />\n              {errorMessageCurrent}\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formPassword}\n                placeholder=\"Password\"\n                onChange={handleChangePassword}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormPassword2\">\n              <Form.Label>Password (again)</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formPassword2}\n                placeholder=\"Password\"\n                onChange={handleChangePassword2}\n              />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              RESET PASSWORD\n            </Button>\n          </Form>\n\n          <div>\n            <p\n              style={{ fontSize: 14, paddingTop: 20 }}\n              onClick={loginPressed}\n            >\n              Back / Cancel\n            </p>\n          </div>\n\n          {errorMessage}\n        </header>\n      </div>\n    );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticate: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: (username, password) =>\n      dispatch({ type: \"UPDATE\", username: username, password: password })\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\n\nimport Button from \"react-bootstrap/Button\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { Link } from \"react-router-dom\";\n\nconst USERNAME = \"username\";\nconst PASSWORD = \"password\";\n\nfunction Register(props) {\n\n\n  const [formFirstName, setFormFirstName] = useState(\"\"); \n  const [formLastName, setFormLastName] = useState(\"\"); \n  const [formPassword, setFormPassword] = useState(\"\"); \n  const [formPassword2, setFormPassword2] = useState(\"\"); \n  const [formEmail, setFormEmail] = useState(\"\"); \n  const [errorMessage, setErrorMessage] = useState(\"\"); \n\n  const handleChangeFirstName = (event) => {\n    setFormFirstName(event.target.value );\n  }\n  const handleChangeLastName = (event) => {\n    setFormLastName(event.target.value ); \n  }\n\n  const handleChangeEmail = (event) => {\n    setFormEmail(event.target.value ); \n  }\n\n  const handleChangePassword = (event) => {\n    setFormPassword(event.target.value);\n  }\n\n  const handleChangePassword2 = (event) => {\n    setFormPassword2(event.target.value ); \n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (\n      (formFirstName.trim() === \"\") |\n      (formLastName.trim() === \"\") |\n      (formEmail.trim() === \"\") |\n      (formPassword.trim() === \"\") |\n      (formPassword2.trim() === \"\")\n    ) {\n      setErrorMessage(\"All fields are required. Please fill all of them.\")\n      return;\n    }\n\n    if (formPassword.trim() !== formPassword2.trim()) {\n      setErrorMessage(\"Passwords don't match.\");\n      return;\n    }\n\n    var firstName = formFirstName;\n    var lastName = formLastName;\n    var email = formEmail;\n    var password = formPassword;\n\n\n    fetch(\n      \"http://localhost:8080/add-user\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body:\n          \"firstName=\" +\n          firstName.trim() +\n          \"&lastName=\" +\n          lastName.trim() +\n          \"&email=\" +\n          email.trim() +\n          \"&password=\" +\n          password.trim() +\n          \"&authType=regular\"\n\n      }\n    ).then(async function(data) {\n      data.json().then(async function(data) {\n        if (data.message === \"User Created\") {\n          setErrorMessage(data.message );\n\n          localStorage.setItem(USERNAME, email.trim());\n          localStorage.setItem(PASSWORD, password.trim());\n\n          props.login(formEmail, formPassword);\n\n          props.history.push({\n            pathname: \"/Profile\"\n          });\n        } else {\n          setErrorMessage( data.message );\n        }\n      });\n    });\n  }\n\n  // in componentDidMount \n  // check if user credentials are already saved,\n  // in that case save it in redux and send him to profile PAGE\n  useEffect(() => {\n    const resultUsername = localStorage.getItem(\"username\");\n    const resultPassword = localStorage.getItem(\"password\");\n    if (\n      resultUsername !== null &&\n      resultUsername !== \"\" &&\n      resultPassword !== null &&\n      resultPassword !== \"\"\n    ) {\n      props.login(resultUsername, resultPassword);\n      props.history.push({\n        pathname: \"/Profile\"\n      });\n    } \n  }, [])\n  // componentDidMount() {\n    \n  // }\n\n    var errorMessageLocal;\n    if (errorMessage.trim() === \"\") errorMessageLocal = null;\n    else\n      errorMessageLocal = (\n        <p style={{ color: \"red\" }}>{errorMessage.trim()}</p>\n      );\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Friends</p>\n          <p>We are glad you are going to become Friends User</p>\n          {errorMessageLocal}\n\n          <p\n            style={{\n              borderStyle: \"solid\",\n              borderColor: \"white\",\n              borderRadius: 5,\n              padding: 5\n            }}\n          >\n            Please Register\n          </p>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"loginFormFirstName\">\n              <Form.Label>First Name</Form.Label>\n              <Form.Control\n                type=\"username\"\n                value={formFirstName}\n                placeholder=\"Enter First Name\"\n                onChange={handleChangeFirstName}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormLastName\">\n              <Form.Label>Last Name</Form.Label>\n              <Form.Control\n                type=\"username\"\n                value={formLastName}\n                placeholder=\"Enter Last Name\"\n                onChange={handleChangeLastName}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"loginFormEmail\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                value={formEmail}\n                placeholder=\"Enter Email\"\n                onChange={handleChangeEmail}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formPassword}\n                placeholder=\"Password\"\n                onChange={handleChangePassword}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"loginFormPassword2\">\n              <Form.Label>Password (again)</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={formPassword2}\n                placeholder=\"Password\"\n                onChange={handleChangePassword2}\n              />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              Sign Up\n            </Button>\n            <Link to=\"/\" className=\"btn btn-link\">\n              Cancel\n            </Link>\n          </Form>\n          <br />\n          <br />\n        </header>\n      </div>\n    );\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    authenticate: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: (username, password) =>\n      dispatch({ type: \"UPDATE\", username: username, password: password })\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Register);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport Form from \"react-bootstrap/Form\";\n\nconst USERNAME = \"username\";\nconst PASSWORD = \"password\";\nconst LOGIN_TYPE = \"login_type\";\nconst ACCOUNT_TYPE = \"account_type\";\nconst EMAIL = \"email\";\n\nfunction Profile(props) {\n\n  const [toEmail, setToEmail] = useState(\"\");\n  const [toMessage, setToMessage] = useState(\"\");\n  const [errorServerMessage, setErrorServerMessage] = useState(\"\");\n  const [friends, setFriends] = useState([]);\n  const [friendMessages, setFriendMessages] = useState([]);\n\n\n  const handleChangeToEmail = (event) => {\n    setToEmail(event.target.value);\n  }\n\n  const handleChangeToMessage = (event) => {\n    setToMessage(event.target.value);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    fetch(\n      \"http://localhost:8080/send-message\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body:\n          \"message=\" + toMessage +\n          \"&messageFromEmail=\" + localStorage.getItem(USERNAME) +\n          \"&messageToEmail=\" + toEmail.trim() +\n          \"&authType=regular\" +\n          \"&password=\" + localStorage.getItem(PASSWORD)\n      }\n    ).then(async function (data) {\n      data.json().then(async function (data) {\n        if (data.message === \"Message sent\") {\n          setErrorServerMessage(\"Message sent successfully.\");\n        } else {\n          setErrorServerMessage(data.message);\n        }\n      });\n    });\n  }\n\n\n  useEffect(() => {\n    if (props.authenticate.user.trim() === \"\") {\n      props.history.push({\n        pathname: \"/\"\n      });\n    }\n    getFriends();\n  }, [])\n\n  const getFriends = () => {\n    fetch(\n      \"http://localhost:8080/all-friends\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body:\n          \"email=\" + localStorage.getItem(USERNAME) +\n          \"&authType=regular\" +\n          \"&password=\" + localStorage.getItem(PASSWORD)\n      }\n    ).then(async function (data) {\n      data.json().then(async function (data) {\n\n        if (data.message === \"Friends attached\") {\n          setFriends(data.usersAll)\n        } else {\n          setErrorServerMessage(data.message);\n        }\n      });\n    });\n  }\n\n  const signMeOut = () => {\n    localStorage.setItem(USERNAME, \"\");\n    localStorage.setItem(PASSWORD, \"\");\n    localStorage.setItem(LOGIN_TYPE, \"\");\n    localStorage.setItem(ACCOUNT_TYPE, \"\");\n    localStorage.setItem(EMAIL, \"\");\n    props.signout();\n    props.history.push({\n      pathname: \"/\"\n    });\n  }\n\n  const changePasswordScreen = () => {\n    props.history.push({\n      pathname: \"/Change\"\n    });\n  }\n\n  const showFriendMessages = (friendEmail) => {\n    fetch(\n      \"http://localhost:8080/messages-user-and-friend\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body:\n          \"userEmail=\" + localStorage.getItem(USERNAME) +\n          \"&friendEmail=\" + friendEmail +\n          \"&authType=regular\" +\n          \"&password=\" + localStorage.getItem(PASSWORD)\n      }\n    ).then(async function (data) {\n      data.json().then(async function (data) {\n\n        if (data.message === \"Messages attached\") {\n          setFriendMessages(data.msgs)\n        } else {\n          setErrorServerMessage(data.message);\n        }\n      });\n    });\n  }\n\n  var changePassword;\n  const resultType = localStorage.getItem(\"login_type\");\n\n  if (resultType === \"special\") {\n    changePassword = null;\n  } else {\n    changePassword = (\n      <div style={{ padding: 10 }}>\n        <Button onClick={() => changePasswordScreen()}>\n          CHANGE PASSWORD\n        </Button>\n      </div>\n    );\n  }\n\n  var errorMessage;\n  if (errorServerMessage !== \"\") {\n    errorMessage = (\n      <p\n        style={{\n          paddingTop: 20,\n          color: \"red\"\n        }}\n      >\n        {errorServerMessage}\n      </p>\n    );\n  } else {\n    errorMessage = null;\n  }\n\n  const friendsData = (\n    <div>\n      {friends.map((usr) =>\n        <div key={usr.email}\n          style={{\n            borderStyle: \"solid\",\n            borderColor: \"white\",\n            borderRadius: 5,\n            padding: 5,\n            margin: 5\n          }}>\n          <li onClick={() => showFriendMessages(usr.email)}>\n            {usr.firstName}{' '}{usr.lastName}{' ['}{usr.email}{']'}\n          </li>\n        </div>\n      )}\n    </div>\n  );\n\n  const friendMessagesData = (\n    <div>\n      {friendMessages.map((msg) =>\n        <div key={msg.sentAt}\n          style={{\n            borderStyle: \"solid\",\n            borderColor: \"white\",\n            borderRadius: 5,\n            padding: 5,\n            margin: 5\n          }}>\n          <li>\n            From: {'   '}{msg.messageFromEmail}{'    '}To: {'   '}{msg.messageToEmail}\n          </li>\n          <div>\n            {msg.message}\n          </div>\n          <div>\n            {msg.sentAt}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {errorMessage}\n        <div style={{ padding: 10 }}>\n          <Button onClick={() => signMeOut()}>SIGN OUT</Button>\n        </div>\n        {changePassword}\n\n        <p>Friends</p>\n        <p>Hi {localStorage.getItem(USERNAME)}</p>\n\n        <p\n          style={{\n            borderStyle: \"solid\",\n            borderColor: \"white\",\n            borderRadius: 5,\n            padding: 5\n          }}\n        >\n          Send Message\n          </p>\n\n        <Form onSubmit={handleSubmit}>\n          <Form.Group controlId=\"toEmail\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control\n              type=\"email\"\n              value={toEmail}\n              placeholder=\"Enter Email\"\n              onChange={handleChangeToEmail}\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"toMessage\">\n            <Form.Label>Message</Form.Label>\n            <Form.Control\n              as=\"textarea\" rows=\"3\"\n              value={toMessage}\n              onChange={handleChangeToMessage}\n            />\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"submit\">\n            SEND\n            </Button>\n        </Form>\n\n        {friendsData}\n        {friendMessagesData}\n\n      </header>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticate: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    login: (username, password) =>\n      dispatch({ type: \"UPDATE\", username: username, password: password }),\n    signout: () => dispatch({ type: \"LOGOUT\" })\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Profile);\n\n","import React from \"react\";\n\nimport { Route, HashRouter as Router } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport Login from \"./Account/Login\";\nimport Forgot from \"./Account/Forgot\";\nimport ResetPassword from \"./Account/ResetPassword\";\nimport Change from \"./Account/Change\";\nimport Register from \"./Account/Register\";\nimport Profile from \"./Message/Profile\";\n\nimport { Provider } from \"react-redux\";\n\nimport { createStore } from \"redux\";\n\n// eslint-disable-next-line no-unused-vars\nconst authentication = (state = [], action) => {\n  switch (action.type) {\n    case \"UPDATE\":\n      return {\n        loggedIn: true,\n        user: action.username,\n        userPassword: action.password\n      };\n    case \"LOGOUT\":\n      return {\n        loggedIn: false,\n        user: \"\",\n        userPassword: \"\"\n      };\n\n    default:\n      return {\n        loggedIn: false,\n        user: \"\",\n        userPassword: \"\"\n      };\n  }\n};\n\nconst store = createStore(authentication);\n\nconst routing = (\n  <Provider store={store}>\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={Login} />\n        <Route exact path=\"/Register\" component={Register} />\n        <Route path=\"/Forgot\" component={Forgot} />\n        <Route path=\"/reset-password\" component={ResetPassword} />\n        <Route path=\"/Change\" component={Change} />\n        <Route path=\"/Profile\" component={Profile} />\n      </div>\n    </Router>\n  </Provider>\n);\n\nconst app = document.getElementById(\"root\");\nReactDOM.render(routing, app);\n\n// ReactDOM.render(\n// <Provider store={store}>\n// <App />\n// </Provider>,\n// document.getElementById(\"app\")\n// )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}